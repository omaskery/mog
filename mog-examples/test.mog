
object objBase {
    private grav: real = 0.5;
    private vel: Vector = tuple(0, 0);
    private mass: real = 60;
    private floor_coefficient: real = 0.9;
    private air_coefficient: real = 0.99;
    private max_speed: tuple<real, real> = tuple(div(100, room_speed), div(100, room_speed));
    private in_air: bool = false;
    private land_height: real = 0;
    private radius: real = 16;
    private immovable: bool = false;

    private max_health: real = 1000;
    private cur_health: real = max_health;
    private invincible: bool = false;
    private damage_dealt: real = 0;

    virtual event create {
    }

    virtual event step {
        depth = negate(y);

        x += vel.x;
        y += vel.y;

        if not(in_air) {
            vel = vel.multiply(floor_coefficient);
            vel.x = clamp(vel.x, -max_speed.0, max_speed.0);
            vel.y = clamp(vel.y, -max_speed.1, max_speed.1);
        } else {
            vel = vel.multiply(air_coefficient);
            if and(greater(y, land_height), greater(vel.y, 0)) {
                audio_play_sound_at(sndLandThud, x, y, 0, 100, 100, 1, 0, 1);
                in_air = false;
                vel.y = 0;
            } else {
                vel.y = add(vel.y, grav);
            }
        }
    }

    virtual event draw {
        let ratio = div(cur_health, max_health);
        let half_width = div(sprite_width, 2);

        let colour = if lesser(ratio, 0.2) {
            c_red
        } else if lesser(ratio, 0.5) {
            c_orange
        } else {
            c_green
        };

        draw_set_colour(colour);

        let left = subtract(x, half_width);
        let top = add(y, 2);
        let height = 6;

        draw_rectangle(left, top, add(left, multiply(sprite_width, ratio)), add(y, height), false);
        draw_set_colour(c_black);
        draw_rectangle(left, top, add(left, sprite_width), add(y, height), true);
    }
}

object objPlayerBase: objBase {
    enum Facing {
        Left,
        Right,
    }

    enum PlayerID {
        A,
        B,
    }

    struct PlayerSprites {
        left: Sprite
    }

    private facing: Facing = Facing.Right;
    private sprites: tuple<spriteID, spriteID> = tuple(noone, noone);
    private max_speed: tuple<real, real> = tuple(div(100, room_speed), div(50, room_speed));
    private my_id: PlayerID.A;

    override event create {
        base();
    }

    override event step {
        base();

        if equal(Global.selected_player, my_id) {
            let result_speed = movement();

            if and(lesser(result_speed.0, 0), equal(facing, Facing.Right)) {
                facing = Facing.Left;
                updateSpriteFromFacing();
            } else if and(greater(result_speed.0, 0), equal(facing, Facing.Left)) {
                facing = Facing.Right;
                updateSpriteFromFacing();
            }
        }
    }

    protected method updateSpriteFromFacing() {
        sprite_index = match facing {
            Facing.Left {
                sprites.0
            },
            Facing.Right {
                sprites.1
            },
        };
    }

    private method movement(): tuple<real, real> {

    }
}

object objPlayerA: objPlayerBase {
    enum State {
        Normal,
        Shielded,
    }

    private struct Data {
        sprites: tuple<spriteID, spriteID>,
        speed: tuple<real, real>,
        mass: real,
    }

    private normal_data: Data;
    private shield_data: Data;

    override event create {
        base();

        normal_data = Data {
            sprites: tuple(sprPlayerA_Left, sprPlayerA_Right),
            speed: tuple(div(90, room_speed), div(40, room_speed)),
            mass: 60,
        };
        shield_data = Data {
            sprites: tuple(sprPlayerA_LeftShield, sprPlayerA_RightShield),
            speed: tuple(div(20, room_speed), div(10, room_speed)),
            mass: 600,
        };

        applyData(normal_data);

        my_id = PlayerID.A;
        cur_state = State.Normal;
    }

    override event step {
        base();

        let old_state = cur_state;
        let is_selected = equal(Global.selected_player, my_id);
        let action_invoked = and(is_selected, isActionInvoked());

        cur_state = match old_state {
            State.Normal {
                if action_invoked {
                    audio_play_sound_at(sndPlayerAction, x, y, 100, 100, 1, 0, 1);
                    State.Shielded
                }
            },
            State.Shielded {
                if action_invoked {
                    audio_play_sound_at(sndPlayerAction, x, y, 100, 100, 1, 0, 1);
                    State.Normal
                }
            },
        };

        if not_equal(cur_state, old_state) {
            match cur_state {
                State.Shielded {
                    applyData(shield_data);
                },
                State.Normal {
                    applyData(normal_data);
                },
            }
        }
    }

    protected method applyData(data: Data) {
        left_sprite = data.sprites.0;
        right_sprite = data.sprites.1;
        max_speed = data.speed;
        mass = data.mass;
        updateSpriteFromFacing();
    }
}